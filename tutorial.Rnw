\documentclass{article}

\title{R Tutorial for Time Series}

\begin{document}
\maketitle

\section{Basics}

\subsection{Useful resources}

\begin{enumerate}
\item Download \href{https://www.r-project.org}
\item IDE: RStudio \href{https://www.rstudio.com/products/rstudio/\#Desktop}
\item Cheat sheet \href{https://cran.r-project.org/doc/contrib/Short-refcard.pdf}
\item More cheat sheet \href{https://www.rstudio.com/resources/cheatsheets}
\item Appendix of your textbook
\end{enumerate}

\subsection{Help}
\begin{enumerate}
\item Search online
\item The \texttt{help()} function
<<>>=
help(mean)
?ts
??TSA
@
\end{enumerate}

\subsection{Packages}
\begin{enumerate}
\item R consists of packages. To find useful packages in some area, read the CRAN Task View first. For example, \href{https://cran.r-project.org/web/views/TimeSeries.html}.
\item To install a package, use the \texttt{install.packages()} function.
<<eval=FALSE>>=
install.packages("TSA")
@
\item To load the package, use the \texttt{library()} function.
<<eval=FALSE>>=
library(TSA)
@

\section{Read and write}

<<eval=FALSE>>=
?read.table
?read.csv
?read.delim
?write.csv
?save
@

\section{Important objects}

\subsection{Vector}

<<>>=
c(1,1.3,8)
x=2:5
x
x^2+1/4

set.seed(130)
x=sample(50)
summary(x)
class(x)
str(x)
@

\subsection{Data Frame}

<<>>=
data(cars)
class(cars)
str(cars)
head(cars)
summary(cars)

cars$dist[1:3]
cars[c(2,8,4),2]
cars[-(2:49),]
cars[which.max(cars$speed),"dist"]
cars[cars$dist %in% c(10,20),]
@

\subsection{Time Series (ts)}
<<>>=
library(TSA)
data(google)
class(google)
str(google)
head(google)
summary(google)
frequency(google)
plot(google)
time(google)
m1 = lm(google~time(google))
summary(m1)

@



\subsection{Your turn}

Explore two datasets: airmiles and milk.

<<>>=
detach("package:TSA", unload=TRUE)
data(airmiles)
plot(airmiles,type='o')
f1 = lm(airmiles~time(airmiles))
abline(f1,col=2,lwd=2)
f2 = lm(airmiles ~ time(airmiles) + I(time(airmiles)^2))
lines(as.vector(time(airmiles)),fitted.values(f2),col=4,lwd=2)
summary(f1)
summary(f2)
@

<<>>=
library(TSA)
data(milk)
plot(milk)
abline(lm(milk~time(milk)),col=2,lwd=2)

#seasonal model
f1 = lm(milk ~ time(milk) + season(milk) - 1)
lines(as.vector(time(milk)),fitted.values(f1),col=3,lwd=2)

#cosine model
f2 = lm(milk ~ time(milk) + harmonic(milk,1))
lines(as.vector(time(milk)),fitted.values(f2),col=4,lwd=2)

#use R^2 to compare models = correlation coefficient.
#adjusted R^2 adjusts for the degrees of freedom 
#when you have multiple regression use adjusted R^2
summary(f1)
summary(f2)
#looking at R^2 >> seasonal model is better

#studentized residuals 
r1 = rstudent(f1)
r2 = rstudent(f2)

par(mfrow=c(1,2))
plot(r1,type='l')
plot(r2,type='l')

hist(r1, breaks =30)
hist(r2, breaks =30)

#if dots are close to line, then data is from Normal distribution.
#measure of fit
#r1 appears Normal, r2 does not appear Normal (dots deviate from line)
qqnorm(r1)
qqline(r1)
qqnorm(r2)
qqline(r2)

#sample autocorrelation function
acf(r1)
#when k=1, rk = 0.8
#when k-11, we get negative values
#everything is bounded by blue dashed lines

acf(r2)
#when k=1, rk= -0.3
#large values around k = 12
#when you see values that go outside of the blue dashed lines, then you will 
#have a large rk >> you do not have white noise. 
#you can use these plots to find {Xt}

#Shapiro test gives you p values
#Ho: data is from Normal dist'n
#H1: data is not from Normal dist'n
#if p-val < alpha = 0.05 >> reject Ho
shapiro.test(r1)
shapiro.test(r2)

#non-parametric test 
#runs test checks if sequence is random or not
#Ho: data is not random
#H1: data is random
#P-val in both cases < 0.05, so we reject null in both cases. 
runs.test(factor(r1>median(r1)))
runs.test(factor(r2>median(r2)))
@

\end{document}